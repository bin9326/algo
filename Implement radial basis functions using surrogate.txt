#Implement radial basis functions using surrogate modelling.

julia> using Surrogates

julia> using LinearAlgebra

julia> f = x -> x[1]*x[2]

#1 (generic function with 1 method)

julia> lb = [1.0,2.0]

2-element Vector{Float64}:

 1.0

 2.0

julia> ub = [10.0,8.5]

2-element Vector{Float64}:

 10.0

  8.5

julia> x = sample(50,lb,ub,SobolSample())

50-element Vector{Tuple{Float64, Float64}}:

 (1.421875, 3.7265625)

 (5.921875, 6.9765625)

 (8.171875, 2.1015625)

 (3.671875, 5.3515625)

 (4.796875, 2.9140625)

 (9.296875, 6.1640625)

 (7.046875, 4.5390625)

 (2.546875, 7.7890625)

 (3.109375, 2.5078125)

 (7.609375, 5.7578125)

 (9.859375, 4.1328125)

 (5.359375, 7.3828125)

 (4.234375, 4.9453125)

 ⋮

 (6.8359375, 3.77734375)



 (2.3359375, 7.02734375)

 (2.8984375, 3.37109375)

 (7.3984375, 6.62109375)

 (9.6484375, 4.99609375)

 (5.1484375, 8.24609375)

 (4.0234375, 4.18359375)

 (8.5234375, 7.43359375)

 (6.2734375, 2.55859375)

 (1.7734375, 5.80859375)

 (2.0546875, 2.76171875)

 (6.5546875, 6.01171875)

julia> y = f.(x)

50-element Vector{Float64}:

  5.2987060546875

 41.3143310546875

 17.1737060546875

 19.6502685546875

 13.9783935546875

 57.3065185546875

 31.9862060546875

 19.8377685546875

  7.7977294921875

 43.8133544921875

 40.7469482421875

 39.5672607421875

 20.9403076171875

  ⋮

 25.821685791015625

 16.415435791015625

  9.770904541015625

 48.985748291015625



 48.204498291015625

 42.454498291015625

 16.832427978515625

 63.359771728515625

 16.051177978515625

 10.301177978515625

  5.674468994140625

 39.404937744140625

julia> my_radial_basis = RadialBasis(x,y,lb,ub)

(::RadialBasis{Surrogates.var"#1#2", Int64, Vector{Tuple{Float64, Float64}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Transpose{Float64, Vector{Float64}}, Float64, Bool}) (generic function with 1 method)

julia> approx = my_radial_basis((1.0,1.4))

7.393838848775784

julia> using Surrogates

julia> using Plots

julia> f = x -> log(x)*x^2+x^3

#3 (generic function with 1 method)

julia> lb = 1.0

1.0

julia> ub = 10.0

10.0

julia> x = sample(50,lb,ub,SobolSample())

50-element Vector{Float64}:

 1.421875

 5.921875

 8.171875

 3.671875

 4.796875

 9.296875

 7.046875

 2.546875



 3.109375

 7.609375

 9.859375

 5.359375

 4.234375

 ⋮

 6.8359375

 2.3359375

 2.8984375

 7.3984375

 9.6484375

 5.1484375

 4.0234375

 8.5234375

 6.2734375

 1.7734375

 2.0546875

 6.5546875

julia> y = f.(x)

50-element Vector{Float64}:

    3.5862460046788556

  270.04676756161575

  685.9977354128239

   67.04360073610188

  146.4550228305127

  996.2617284880087

  446.89917289031825

   22.584571855090758

   41.02993036005573

  558.1089187463488

 1180.8543241105228



  202.15815988267667

  101.79917240581261

    ⋮

  409.26783084818067

   17.375741376801944

   33.2896427295343

  514.5105733302689

 1109.217040550318

  179.9024620470891

   87.667581202268

  774.8927802951885

  319.1679378195223

    7.379482600023513

   11.714533728890856

  362.3950608511988

julia> my_radial_basis = RadialBasis(x,y,lb,ub)

(::RadialBasis{Surrogates.var"#1#2", Int64, Vector{Float64}, Vector{Float64}, Float64, Float64, Transpose{Float64, Vector{Float64}}, Float64, Bool}) (generic function with 1 method)

julia> approx = my_radial_basis(5.4)

206.83097750423224

julia> plot(x, y, seriestype=:scatter, label="Sampled points", xlims=(lb, ub), legend=:top)







julia> plot!(f, label="True function",  xlims=(lb, ub), legend=:top)







julia> plot!(my_radial_basis, label="Surrogate function",  xlims=(lb, ub), legend=:top)








